@import "./stylesheets/colors.less";

// EDITOR BACKGROUND & FONT COLORS
.editor-colors {
  background-color: @code-background;
  color: @code-font-color;
}

// MAIN CODE EDITOR STYLES
.editor {

  background-color: @code-background;
  color: @code-font-color;

  // border-top: solid 6px @selected-line;

  // LINE THAT DESIGNATES WHERE TEXT WILL WRAP
  .wrap-guide {
    background: @guides;
  }

  // LINE BETWEEN BRACKET INDENTATIONS
  .indent-guide {
    color: @guides;
  }

  .invisible-character {
    color: @invisible;
  }

  // GUTTER / LINE NUMBERS
  .gutter {

    background-color: @gutter-background;
    color: @gutter-text;
    // border-right: 10px solid @code-background;

    .line-number {

      // GUTTER BACKGROUND
      background: @gutter-background;
      color: @gutter-text;
      padding: 0px;


      // SELECTED BLOCK
      &.cursor-line {
        background-color: @gutter-background-highlight;
        color: @gutter-text-highlight;
        font-weight: 100;
      }

      // CURRENT ACTIVE LINE
      &.cursor-line-no-selection {
        background-color: @gutter-background-highlight !important;
        color: @gutter-text-highlight;
        // font-weight: bold;
      }

    }

    // HOVER STATE FOR LINE NUMBERS
    .line-number:hover {
      background-color: @gutter-background !important;
      color: @gutter-text-highlight;
    }
  }

  // LINE NUMBER FOR SECTIONS THAT HAVE BEEN COLLAPSED
  .gutter .line-number.folded,
  .gutter .line-number:after,
  .fold-marker:after {
    color: #FFF;
    background: @gutter-text;
  }

  // INVISIBLE CHARACTES
  .invisible {
    color: @invisible;
  }

  // CURSOR COLOR
  .cursor {
    border-color: @cursor-color !important;
    border-left: solid @cursor-width;
  }

  // BACKGROUND OF SELECTED TEXT
  .selection .region {
    background-color: @selected;
  }

}

// ADD LEFT PADDING TO CODE VIEW
.scroll-view {
  padding-left: 10px;
}



// SELECTED LINE STYLE
.line.cursor-line {
  background: @selected-line !important;
  padding-left: 10px;
  margin-left: -10px;
}

// HIGHLIGHT STYLE FOR SEARCH MATCHES
.editor .search-results .marker .region {
  background-color: @search-bg;
  border: @search-border;
}

// HIGHLIGHT STYLE FOR CURRENTLY SELECTED SEARCH RESULT
.editor .search-results .marker.current-result .region {
  background-color: @search-active-bg;
  border: @search-active-border;
}

// COMENTS, DUHR
.comment {
  color: @comment;
  background: @comment-bg;
}


.keyword {

  // @ of @font-face & @media
  color: @keyword;

  // try, catch, if, else, return (js)
  &.control {
    color: @keyword;
  }

  // =, +, -, ?, :, !=. &&, in (js)
  &.operator {
    color: @keyword-oper; //@keyword;
  }

  // can't tell what this does :/
  &.other.special-method {
    color: @keyword;
  }

  // can't tell what this does :/
  &.other.unit {
    color: @keyword;
  }
}


// STORAGE |
.storage {
  color: @storage;

  // var of var a = b;
  &.modifier {
    color: @storage;
  }
}

// STORAGE | java fix
.meta.class.identifier .storage.modifier, .meta.class .meta.method .storage.modifier {
  color: @storage;
}
.meta.class .storage.modifier {
  color: @keyword;
}

.constant {

  // true, false, null, undefined
  color: @constant;

  // \ of ("what\'s")
  &.character.escape {
    color: @support-const; //@constant;
  }

  // all the numbers!
  &.numeric {
    color: @numeric;
  }

  // can't tell what this does :/ //RGB code
  &.other.color, &.other.rgb-value {
    color: @numeric; //@constant;
  }

  // can't tell what this does :/
  &.other.symbol {
    color: @constant;
  }
}



.variable {

  // this (js), @varable_name (sass), http://web.com of url(http://web.com), variable of {{variable}} (handlebars)
  color: @variable;

  // can't tell what this does
  &.interpolation {
    color: @variable;
  }

  // foo & bar of function name(foo, bar)
  &.parameter.function {
    color: @function-param;
    font-style: italic; //add
  }
}


// INVALID TEXT
.invalid.illegal, .invalid.deprecated {
  background: none;
  color: @error;
}

.string {

  .json {

  }

  // 'value' of var='value', "name.png" or src="name.png"  , etc
  color: @string;

  // REGEX - [\da-z] of /-([\da-z])/gi (js)
  .constant {
    color: @regex;
  }

  &.regexp {

    // ?:input, select, textarea, button of  /^(?:input|select|textarea|button)$/i,
    color: @regex;

    .constant.character.escape,
    .source.ruby.embedded,
    .string.regexp.arbitrary-repitition {
      color: @regex;
    }

    &.group {
      color: @regex;
    }

    &.character-class {
      color: @regex;
    }

    .source.ruby.embedded {
      color: @regex;
    }

  }

  // site.dir in {{site.dir}}
  .variable {
    color: @variable;
  }

  // can't tell what this does :/
  &.other.link {
    color: @string;
  }
}

// String interpolation in Ruby, CoffeeScript, and others
.source .string {
  .source,
  .meta.embedded.line {
    color: @string;
  }

  .punctuation.section.embedded {
    color: @string;

    .source {
      color: @string;  // Required for the end of embedded strings in Ruby # 716
    }
  }
}

// MISC PUNCTUATION
.punctuation {

  &.terminator {
    color: @punctuation;
  }

  &.separator {
    color: @punctuation-sep; //@punctuation;
  }

  &.definition {

    color: @punctuation;

    &.comment {
      color: @comment-punc;
    }

    // QUOTES
    &.string,
    &.variable,
    &.parameters,
    &.array {
      color: @string;
    }

    &.heading,
    &.identity {
      color: @code-font-color;
    }

    &.bold {
      color: @code-font-color;
      font-style: bold;
    }

    &.italic {
      color: @code-font-color;
      font-style: italic;
    }
  }

  &.section.embedded {
    color: @code-font-color;
  }

}



.support {

  // background of background: none,
  color: @support;

  // SUPPORT | module of module.exports
  &.class {
    color: @support;
  }

  &.function  {
    color: @support-func; //@support; // .log of console.log, url of url(http://web.com)

    // can't tell what this does :/
    &.any-method {
      color: @support;
    }
  }

  // {{}} of {{ variable }}
  &.constant {
    color: @support-const;//@constant;  // none of text-decoration: none;
  }

  &.type.property-name.css {
    color: @support;
  }
}

// .class names in css & scss
.source .entity.name.tag {
  color: @entity-name-tag; //@class;
}
.source .entity.other.attribute-name {
  color: @attr-string; //@class;

  &.class {
      color: @entity;
  }
}
.meta.tag.inline, .meta.tag.inline .entity {
  color: @class;
}

  &.tag,
  &.tag .entity {
    color: @tag-entity;
  } //TODO error in above sec?


.html {

  .string {
    color: @code-font-color !important;
  }


  // inline elements - <span>
  .meta {


  }

  .punctuation.definition.tag {
    color: @tag;
  }

  .entity {

    &.name.tag {
      text-decoration: done;

      // structural elements - <html>
      &.structure {
        color: @tag;
      }

      // block level elements - <div>, <h1>
      &.block {
        color: @tag;
      }

      // inline elements - <span>
      &.script {
        // color: @tag;
      }

    }

    &.other {
      &.attribute-name {
        color: @element-attr;
      }
    }

  }

}

// ENTITY | exports of module.exports, <div id= of <div id="#id">, . of .className
.entity {

  color: @entity;

  // console of console.log (js)
  &.name.type {
    color: @entity;
    text-decoration: none;
  }

  &.other.inherited-class {
    color: @entity;
    font-style: italic; //added for java

  }

  // init in init: function(){} (js)
  &.name.function {
    color: @entity; //TODO std=gray for python `@name`, but connected with js func

    // Python decorator
    &.decorator.python {
        color: @comment;
    }
  }

  &.name.class, &.name.type.class {
    color: @entity;
  }

  &.name.section {
    color: @entity;
  }

  // div of <div> (html), body of body{} (css)
  &.name.tag {
    color: @tag;
    text-decoration: done;
  }


  // CSS CLASSES
  &.other.attribute-name {
    color: @element-attr;

    // CSS ID's
    &.id {
      color: @id;
    }
  }
}

.meta {
  & .class {
    //color: @constant; //rm
  }

  &.link {
    color: @meta;
  }

  &.require {
    color: @meta;
  }


  &.brace {

    // curly braces - {}
    &.curly {
      color: @brackets;
    }

    // parenthesis - ()
    &.round {
      color: @code-font-color;
    }
  }

  &.comma {
    color: @punctuation;
  }

  // .css files | commas, ([controls]) of audio:not([controls])
  &.selector {
    color: @punctuation;
  }

  &.separator {
    background-color: @punctuation;
    color: @punctuation;
  }
}

.none {
  color: @code-font-color;
}

.editor.mini .scroll-view {
  padding-left: 1px;
}

// Markdown code
.markup {
  &.bold {
    color: @markup;
    font-style: bold;
  }

  &.changed {
    color: @string;
  }

  &.deleted {
    color: @error;
  }

  &.italic {
    color: @markup;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @markup;
  }

  &.inserted {
    color: @variable;
  }

  &.list {
    color: @markup;
  }

  &.quote {
    color: @markup;
  }

  &.raw.inline {
    color: @markup;
  }

  &.underline.link {
    color: @string; //added
    text-decoration: underline;
  }
}

.source.gfm {
  .support.quote {
    color:@numeric; //added
  }
  .comment.quote {
    color: darken(@code-font-color, 20%); //added
  }
  .comment.hr {
    color:@numeric; //added
  }
}

.gfm {

  // .bold {
  //   color: @testclr;
  //   font-weight: bold;
  // }
  //
  // .italic {
  //   color: @testclr;
  //   font-style: italic;
  // }

  .variable.list {
    color: @numeric;
    font-weight: bold;
  }

  .link {
    color: @comment; // for []()

    .entity {
      color: @support;
    }
  }
}

.source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @keyword; //@code-font-color;
    font-weight: bold;
  }
  &.raw {
    color: @function-param; //added
  }
}

// Markdown preview changes
.markdown-preview {

    // General
    background-color: @code-background;
    color: @code-font-color;

    // Links
    a, a code {
        color: @string;
    }
    a.absent {
        color: lighten(@error, 20%);
    }

    // Headings
    h1, h2, h3, h4, h5, h6 {
        color: @keyword;
    }
    h1, h2 {
        border-bottom: 1px dashed @comment;
    }

    // Line
    hr {
        background: @numeric repeat-x 0 0;
    }

    // Quote
    blockquote {
        border-left: 4px solid @numeric;
        color: @comment;
    }

    // Tables
    table {
        th, td {
            border: 1px none lighten(@code-background, 10%);
            // border-bottom: 2px solid lighten(@code-background, 15%);
        }
        tr {
            border-top: 1px none lighten(@code-background, 10%);
            background-color: lighten(@code-background, 10%);
            &:nth-child(2n) {
                background-color: lighten(@code-background, 15%);
          }
        }
    }

    // Framed ???
    span.frame {
        & > span {
            border: 1px solid @code-background;
        }
        span span {
            color: @code-font-color;
        }
    }

    // Inline code
    code {
        color: @function-param;
    }

    // Inline code snippets
    code, tt {
        border: 1px dashed lighten(@code-background, 20%);
        background-color: lighten(@code-background, 10%);
    }

    // ???
    pre {
        // background: #f8f8f8;
        // border: 1px solid #ccc;
        background: lighten(@code-background, 10%);
        border: 1px solid @code-background;
    }

    // Code block
    pre.editor-colors {
        background-color: lighten(@code-background, 10%);
        border: 1px solid lighten(@code-background, 20%);
    }

    // ???
    kbd {
        // background-color: #dddddd;
        // background-image: linear-gradient(#f1f1f1, #ddd);
        // background-repeat: repeat-x;
        // border: 1px solid #ddd;
        // border-bottom-color: #ccc;
        // border-right-color: #ccc;
        background-color: darken(@syntax-background-color, 10%);
        background-image: linear-gradient(lighten(@code-background, 10%), @code-background);
        background-repeat: repeat-x;
        border: 1px solid @code-background;
        border-bottom-color: @code-background;
        border-right-color: @code-background;
    }
}


// Bash
.source.shell {
  color: @numeric; //added
  .storage.modifier {
    color: @support; //added
  }
}


// PLUGIN SPECIFIC STYLES

.bracket-matcher {
  border-bottom: 1px solid @string;
  margin-top: 2px;
}
